{
    "collab_server" : "",
    "contents" : "#' Read SVC files\n#'\n#' Function to read .sig files and combine them in a data.frame\n#'\n#'\n#' @param inputdir Input directory containing .sig files.\n#' Higher level directories are supported.\n#' @param inclbad Logical. Should files flagged \"bad\" be included?\n#' @param inclwr Logical. Should white reference files, flagged\n#' \"WR\" be included?\n#' @param read Logical. If TRUE files are read and combined in a data.frame.\n#' If FALSE the filenames are returned.\n#' @param filename Logical. Should the filename be included as the first column?\n#' @return The output is a dataframe.\n#' @examples\n#' \\dontrun{\n#' read.svc(\"path_to_your_folder\")\n#' }\n\n\n###### 10-18-2016 ##########################\n##### READ SVC DATA ############### only 2 cases implemented: GOOD, WR&BAD\n\nread.svc <- function (inputdir, inclbad=FALSE, inclwr=FALSE, read=FALSE,\n                      filename=TRUE) {\n  if (inclbad & inclwr) {\n    files <- dir(inputdir, recursive=TRUE, full.names=TRUE, pattern=\"\\\\.sig$\")\n  } else {\n    temp <- dir(inputdir, recursive=TRUE, full.names=TRUE, pattern=\"\\\\.sig$\")\n    files <- temp[!grepl(\"BAD|WR\", temp)]\n  }\n  if (inclbad) {\n    temp <- dir(inputdir, recursive=TRUE, full.names=TRUE, pattern=\"\\\\.sig$\")\n    files <- temp[!grepl(\"WR\", temp)]\n  }\n  if (inclwr) {\n    temp <- dir(inputdir, recursive=TRUE, full.names=TRUE, pattern=\"\\\\.sig$\")\n    files <- temp[!grepl(\"BAD\", temp)]\n  }\n  if (read==TRUE & inclbad==TRUE & inclwr==TRUE) {\n    temp <- dir(inputdir, recursive=TRUE, full.names=TRUE, pattern=\"\\\\.sig$\")\n    files <- as.data.frame(t(do.call (cbind, lapply (temp, function (x) read.delim (x, sep=\" \", skip=25, header=F)\n                                                     [,c(7)]))))\n    files <- files/100\n    wave <- read.wvl.svc(inputdir)\n    names(files) <- wave\n    if(filename==TRUE){\n      ID <- read.filenames.svc(inputdir, inclbad = T, inclwr = T)\n      files <- cbind(ID, files)\n    }\n  } else if (read==TRUE) {\n    temp <- dir(inputdir, recursive=TRUE, full.names=TRUE, pattern=\"\\\\.sig$\")\n    temp <- temp[!grepl(\"BAD|WR\", temp)]\n    files <- as.data.frame(t(do.call (cbind, lapply (temp, function (x) read.delim (x, sep=\" \", skip=25, header=F)\n                                                     [,c(7)]))))\n    files <- files/100\n    wave <- read.wvl.svc(inputdir)\n    names(files) <- wave\n    if(filename==TRUE){\n      ID <- read.filenames.svc(inputdir)\n      files <- cbind(ID, files)\n    }\n  }\n  if (read==TRUE & inclbad==TRUE & inclwr==FALSE) {\n    temp <- dir(inputdir, recursive=TRUE, full.names=TRUE, pattern=\"\\\\.sig$\")\n    temp <- temp[!grepl(\"WR\", temp)]\n    files <- as.data.frame(t(do.call (cbind, lapply (temp, function (x) read.delim (x, sep=\" \", skip=25, header=F)\n                                                     [,c(7)]))))\n    files <- files/100\n    wave <- read.wvl.svc(inputdir)\n    names(files) <- wave\n    if(filename==TRUE){\n      ID <- read.filenames.svc(inputdir, inclbad = T)\n      files <- cbind(ID, files)\n    }\n  }\n  if (read==TRUE & inclbad==FALSE & inclwr==TRUE) {\n    temp <- dir(inputdir, recursive=TRUE, full.names=TRUE, pattern=\"\\\\.sig$\")\n    temp <- temp[!grepl(\"BAD\", temp)]\n    files <- as.data.frame(t(do.call (cbind, lapply (temp, function (x) read.delim (x, sep=\" \", skip=25, header=F)\n                                                     [,c(7)]))))\n    files <- files/100\n    wave <- read.wvl.svc(inputdir)\n    names(files) <- wave\n    if(filename==TRUE){\n      ID <- read.filenames.svc(inputdir, inclwr = T)\n      files <- cbind(ID, files)\n    }\n  }\n  return(files)\n}\n\n\n\n",
    "created" : 1479071157533.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2291104705",
    "id" : "A7C15E17",
    "lastKnownWriteTime" : 1479076043,
    "last_content_update" : 1479076043103,
    "path" : "~/Documents/Spectrolab/spectrolab/R/read_SVC.R",
    "project_path" : "R/read_SVC.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}